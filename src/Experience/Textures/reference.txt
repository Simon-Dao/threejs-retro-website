import * as THREE from './node_modules/three/build/three.module.js'
import { OrbitControls } from './node_modules/three/examples/jsm/controls/OrbitControls.js'
import { UnrealBloomPass } from './node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js'
import * as dat from './node_modules/dat.gui/build/dat.gui.module.js'
import { EffectComposer } from './node_modules/three/examples/jsm/postprocessing/EffectComposer.js'
import { RenderPass } from './node_modules/three/examples/jsm/postprocessing/RenderPass.js';
import vertexShader from './shaders/vertexShader.js'
import atmosphereVertex from './shaders/atmosphereVertex.js'
import fragmentShader from './shaders/fragmentShader.js'
import atmosphereFragment from './shaders/atmosphereFragment.js'
import {loadMainPage} from './webpage.js'
var renderer;
var scene;
var camera;
var cameraControl;
var loader;
var updateFcts = [];
var video;
var videoImageContext;
var videoImage;
var videoTexture;


function createRenderer() {
    renderer = new THREE.WebGLRenderer();
    renderer.setClearColor(0x111111, 1.0);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMap.enabled = true;
}

function createCamera() {
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.x = 0;
    camera.position.y = 100;
    camera.position.z = 450;
    camera.lookAt(scene.position);
    //cameraControl = new THREE.OrbitControls(camera);
}

var THREEx = THREEx || {}
THREEx.VideoTexture = function(url) {
    video = document.createElement('video');

    video.autoplay = true;
    video.loop = true;
    video.src = 'desktop.mp4';
    video.load();
    video.play();

    videoImage = document.createElement('canvas');
    videoImage.width = 320;
    videoImage.height = 240;
    videoImageContext = videoImage.getContext('2d');
    videoImageContext.fillStyle = '#000000';
    videoImageContext.fillRect(0, 0, videoImage.width, videoImage.height);

    this.texture = new THREE.Texture(videoImage);
    this.texture.minFilter = THREE.LinearFilter;
    this.texture.magFilter = THREE.LinearFilter; 

    this.destroy = function() {
        video.pause()
    }
}

function createVideo() {
    videoTexture = new THREEx.VideoTexture('myvideo.mp4')
    updateFcts.push(function(delta, now) {
        videoTexture.update(delta, now)
    });
    var geometry = new THREE.BoxGeometry(50, 50, 10);
    var material = new THREE.MeshBasicMaterial({
        map: videoTexture.texture,
        side: THREE.DoubleSide
    });
    var mesh = new THREE.Mesh(geometry, material);
    mesh.rotation.set(0,2,0)
    scene.add(mesh);
    updateFcts.push(function(delta, now) {
        mesh.rotation.x += 1 * delta;
        mesh.rotation.y += 2 * delta;
    });
}

function createLight() {
    var spotLight = new THREE.SpotLight(0xffffff);
    spotLight.position.set(10, 40, 20);
    spotLight.shadowCameraNear = 20;
    spotLight.shadowCameraFar = 50;
    spotLight.castShadow = true;
    scene.add(spotLight);
    var ambient = new THREE.AmbientLight(0x444444);
    ambient.castShadow = true;
    scene.add(ambient);
    var directionalLight = new THREE.DirectionalLight(0xffeedd);
    directionalLight.position.set(0, 0.5, 0.5).normalize();
    scene.add(directionalLight);
}

function init() {
    scene = new THREE.Scene();
    createRenderer();
    createCamera();
    createLight();
    createVideo();
    document.body.appendChild(renderer.domElement);
    render();
}

function render() {
    //cameraControl.update();
    if (video.readyState === video.HAVE_ENOUGH_DATA) {
        videoImageContext.drawImage(video, 0, 0);
        if (videoTexture)
            videoTexture.texture.needsUpdate = true;
    }
    renderer.render(scene, camera);
    requestAnimationFrame(render);
}

init();